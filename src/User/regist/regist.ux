<import src="../../common/TitleBar.ux"></import>
<import name="toast" src="../../common/Toast/index.ux"></import>
<template>
    <div class="regist" onclick="inputFocus()">
        <TitleBar title="注册" color="#fff"></TitleBar>
        <div class="input top">
            <div class="name"><text>手机号</text></div>
            <div class="content">
                <input id="mobile" value="{{sms_phone}}" @change="smsPhone" type="number" placeholder="请输入手机注册号码">

            </div>
        </div>
        <div class="input">
            <div class="name"><text>验证码</text></div>
            <div class="captcha">
                <input id="code" value="{{sms_code}}" @change="smsCode" type="number" placeholder="请输入验证码">
                <text class="countdown-btn" if="{{clickable}}" @click="countdown">{{codeText}}</text>
                <text class="seconds" if="{{!clickable}}" >{{codeText}}</text>
            </div>
        </div>
		<div class="input top">
            <div class="name"><text>登录密码</text></div>
            <div class="content">
                <input id="password1" value="{{password}}" @change="getPassword" type="password" placeholder="支持6-20位字母数字组合">
            </div>
        </div>
		<div class="input">
            <div class="name"><text>密码确认</text></div>
            <div class="content">
                <input id="password2" value="{{confirm_password}}" @change="getConPassword" type="password" placeholder="请再次输入登录密码">
            </div>
        </div>
        <div class="btn">
            <input @click="register" type="button" value="注册">
        </div>
        <toast if="{{show_toast}}" text="{{toast_text}}"></toast>
    </div>
</template>

<style lang="less">
	@import './regist.less';
</style>

<script>
	import router from '@system.router'
    import request from '../../utils/request';
    import statis from '../../utils/statistics.js';
    import storage from"@system.storage";
    import fetch from '@system.fetch'

	export default Custom_page ({
		protected: {
            tab: 'i0',
            sms_phone: '',
            sms_code: '',
            password:'',
            confirm_password:'',
            show_toast:false,
            toast_text:'',
		},
		private: {
			detail: null,
            tq: [],
            codeText:"获取验证码",
            clickable:true,
            timer:''
        },
        // 收起软键盘
        inputFocus(){
            this.$element('mobile').focus({focus:false})
            this.$element('code').focus({focus:false})
            this.$element('password1').focus({focus:false})
            this.$element('password2').focus({focus:false})
        },
        onDestroy(){
            clearInterval(this.timer);
        },
        // 监听输入框
        smsPhone(response){
            this.sms_phone = response ? response.value : this.sms_phone;
        },
        smsCode(response){
            this.sms_code = response ? response.value : this.sms_code;
        },
        getPassword(response){
            this.password = response ? response.value : this.password;
        },
        getConPassword(response){
            this.confirm_password = response ? response.value : this.confirm_password;
        },
        // 显示toast
        showToast(text){
            this.toast_text = text;
            this.show_toast = true;
            setTimeout(() => {
                this.show_toast = false;
            },1500)
        },
        // 匹配手机号并发送验证码
        verifyPhone(){
            statis.statis('regist_code',{mobile:this.sms_phone},this)
            if(!(/^1[3456789]\d{9}$/.test(this.sms_phone))){ 
                    this.showToast("手机号码有误，请重填");
                    return false; 
                }else{
                    request.post('user/sms',{mobile:this.sms_phone}).then((res) => {
                        this.showToast("验证码发送成功！");
                        statis.statis('regist_code_success',{mobile:this.sms_phone},this)
                    }).catch(err => {
                        this.showToast("网络错误");
                    })
                    return true;
                } 
        },
        // 倒计时
        countdown(){
            this.inputFocus()
            if(!(/^1[3456789]\d{9}$/.test(this.sms_phone))){ 
                this.showToast("手机号码有误")
            }else{
                this.verifyPhone()
                this.clickable = false;
                if(this.codeText.indexOf("获取") != -1){
                    this.codeText = "60S"
                }
                this.timer = setInterval(() =>{
                    let code = Number(this.codeText.substring(0,2));
                    if(code <= 1){
                        clearInterval(this.timer);
                        this.clickable = true;
                        this.codeText = "重新获取"
                    }else{
                        const sec = code -1 
                        this.codeText =  (sec < 10 ? '0' + sec : sec)  + "S"
                    }
                },1000)
            }
            
        },
        // 注册
        register(){
            this.inputFocus()
            statis.statis('regist_click',{mobile:this.sms_phone},this)
            if(this.password != this.confirm_password){
                this.showToast("两次输入密码不一致");
                return false;
            }
            if(!(/^1[3456789]\d{9}$/.test(this.sms_phone))){ 
                this.showToast("手机号码有误，请重填");
                return false; 
            }
            if(this.sms_code.length != 4){
                this.showToast("请填写4位验证码");
                return false; 
            }
            const params = {
                mobile:this.sms_phone,
                code:this.sms_code,
                password:this.password,
                confirmPassword:this.confirm_password,
            }
            
            request.post('user/reg',params).then(res => {
                if(res.status == 200){
                    this.showToast("注册成功");
                    statis.statis('regist_click_success',{mobile:this.sms_phone},this)
                    storage.set({
                        key: 'sid',
                        value: res.data.sessionId,
                    })
                    storage.set({
                        key: 'mobile',
                        value: res.data.mobile,
                    })
                    router.replace({
                        uri:"/"
                    })
                }else{
                    this.showToast(res.msg);
                }
                
            }).catch(err => {
                this.showToast("网络错误");
            })
        }
	})
</script>