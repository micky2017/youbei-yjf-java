<import src="../../common/TitleBar.ux"></import>
<import name="toast" src="../../common/Toast/index.ux"></import>
<import src="../../common/YjfLoading.ux"></import>

<template>
    <div class="group-manage_body">
        <TitleBar title='户号管理' color="#fff"></TitleBar>
        <YjfLoading if="showLoading" />
        <list>
            <list-item type="{{$item.groupName}}" class="group-body" for="groupList">
                <div class="group-body_title">
                    <text>{{$item.groupName}}</text>
                    <div>
                        <image resize-mode="contain" @click="showModificationFn('choose',$item)" src="../../images/groupImg/choose_icon.png"></image>
                        <image resize-mode="contain" @click="showDeleteFn($item)" src="../../images/groupImg/delete_icon.png"></image>
                    </div>
                </div>
                <div class="group-manage_content" for="item in $item.children">
                    <div class="group-content_left">
                        <image width="80" height="80" resize-mode="contain" src="{{item.imgUrl}}"></image>
                        <div>
                            <text class="pay-type_text">{{item.typeName}}</text>
                            <text class="pay-bill">{{item.houseNumber}}</text>
                        </div>
                    </div>
                    <div class="group-content_right">
                        <image resize-mode="contain" @click="goRecharge(item.gid,item.groupName,item)" src="../../images/groupImg/choose_icon.png"></image>
                        <image resize-mode="contain" @click="showDeleteBillFn(item.id)" src="../../images/groupImg/delete_icon.png"></image>
                    </div>
                </div>
            </list-item>
            <list-item class="group-body" onclick="showModificationFn('add',{})">
                <div class="add-group">
                    <!-- <text>➕</text> -->
                    <image resize-mode="contain" src="../../images/groupImg/add_group_icon.png"></image>
                    <text>新增分组</text>
                </div>
            </list-item>
        </list>
        <div if='showModification' @click="closeWindow" class="modification-body">
            <div @click="voidFn" class="modification-content">
                <div class="modification-title">
                    <text>请输入新的分组名称</text>
                </div>
                <div class="modification-input">
                    <input id="groupValue" value="{{groupNameValue}}" @change="changeGroupName" placeholder="请输入分组名称" type="text"></input>
                </div>
                <div class="modification-btn">
                    <text @click="closeWindow">取消</text>
                    <text @click="saveGroupInfo" class="modification-save_btn">保存</text>
                </div>
            </div>
        </div>
        <div if="showDelete" @click="closeWindow" class="modification-body delete-body">
            <div class="modification-content">
                <div class="modification-title">
                    <text>确认删除分组？</text>
                </div>
                <div class="modification-input">
                    <text>分组下的户号也将一同删除</text>
                </div>
                <div class="modification-btn">
                    <text>取消</text>
                    <text @click="deleteGroup" class="modification-save_btn">删除</text>
                </div>
            </div>
        </div>
        <div if="showDeleteBill" @click="closeWindow" class="modification-body delete-body">
            <div class="modification-content">
                <div class="modification-title">
                    <text>确认删除户号？</text>
                </div>
                <div class="modification-input">
                    <text>户号删除后可重新添加</text>
                </div>
                <div class="modification-btn">
                    <text>取消</text>
                    <text @click="deleteBill" class="modification-save_btn">删除</text>
                </div>
            </div>
        </div>
        <toast if="{{show_toast}}" text="{{toast_text}}"></toast>
    </div>
</template>
<style lang="less">
@import './index.less';
</style>
<script>
import storage from '@system.storage';
import request from '../../utils/request'
import router from '@system.router';
import account from '@service.account'
import fetch from '@system.fetch'
export default Custom_page({
    public: {
        external:"",
    },
    private: {
        showModification: false,
        showDelete: false,
        showDeleteBill: false,
        groupList: [],
        groupNameValue: "",
        groupType: '',
        groupName: '',
        item: {},
        billItem: {},
        billId: "",
        toast_text: '',
        show_toast: false,
        showLoading: false
    },
    onInit(){
        let that = this
        storage.get({
            key:'sessionId',
            success:(data) => {
                if(data){
                    this.getGroup()
                }else{
                    if(this.external == "vivoNegative"){
                        account.authorize({
                            type: 'code',
                            redirectUri: 'https://t.ubaycn.com/',
                            success: function(data) {
                                console.log("第一步返回的data",data)
                                let postCode = data.code
                                console.log(postCode);
                                fetch.fetch({
                                    url: 'https://t.ubaycn.com/vivo/getAccessToken?code='+postCode,
                                    // url: 'http://192.168.1.109:8090/vivo/getAccessToken?code='+postCode,
                                    success: function (response) {
                                        console.log("第二步返回的data",response)
                                        const strToObj = JSON.parse(response.data)
                                        console.log(strToObj);
                                        let postToken = strToObj.data.accessToken
                                        console.log(postToken);
                                        account.getProfile({
                                            token: postToken,
                                            success: function(data) {
                                                console.log(data)
                                                // this.vivoOpenid = data.openid;
                                                // that.Loginmsg();
                                                account.getPhoneNumber({
                                                    success: function(data) {
                                                        console.log(`handling success phoneNumber: `,data.phoneNumber)
                                                        fetch.fetch({
                                                            url: 'https://t.ubaycn.com/ub/user/login/oneClick',
                                                            // url: 'http://192.168.1.109:8090/ub/user/login/oneClick',
                                                            method:"post",
                                                            data:{
                                                                environment: "zhengshi",
                                                                mobile:data.phoneNumber,
                                                            },
                                                            success:function(res){
                                                                console.log("vivo一键登录成功",res);
                                                                if(res.code == 200){
                                                                    let data = JSON.parse(res.data);
                                                                    console.log("一键登录成功的data值",data);
                                                                    console.log("获取到的mid",data.data.mid)
                                                                    storage.set({
                                                                        key:'_id',
                                                                        value:data.data.mid
                                                                    })
                                                                    storage.set({
                                                                        key:"sid",
                                                                        value:data.data.sessionId
                                                                    })
                                                                    storage.set({
                                                                        key:"mobile",
                                                                        value:data.data.mobile
                                                                    })
                                                                    that.getGroup();
                                                                }
                                                            },
                                                            fail:function(err){
                                                                console.log(err);
                                                            }
                                                        })
                                                    },
                                                    fail: function(data, code) {
                                                        router.replace({
                                                            uri:'User/SmsLogin',
                                                            params:{
                                                                external:this.external,
                                                            }
                                                        })
                                                        console.log(`handling fail, code = ${code}`)
                                                    }
                                                })
                                            },
                                            fail: function(data, code) {
                                                console.log(`handling fail, code = ${code}`)
                                            }
                                        })
                                    },
                                    fail: function (data, code) {
                                        console.log(`handling fail, errMsg = ${data}`)
                                        console.log(`handling fail, errCode = ${code}`)
                                    }
                                })
                            },
                            fail: function(data, code) {
                                console.log(`handling fail, code = ${code}`)
                            }
                        })
                    }else{
                        router.replace({
                            uri:"User/SmsLogin"
                        })
                    }
                }
            },
            error:(err) => {
                router.replace({
                    uri:"User/SmsLogin"
                })
            }
        })
    },
    onShow() {
        // this.getGroup()
    },
    // 显示toast
    showToast(text) {
        this.toast_text = text;
        this.show_toast = true;
        setTimeout(() => {
            this.show_toast = false;
        }, 1500)
    },
    voidFn() {
        return;
    },
    changeGroupName(response) {
        this.groupNameValue = response ? response.value : this.groupNameValue;
    },
    // 获取分组信息
    getGroup() {
        var that = this;
        request.post('user/get-group').then(res => {
            console.clear();
            console.log("GM.user/get-group", res);
            if (res.status == 200) {
                console.log("get-group.200");
                // res.data = eval(res.data.list);
                that.groupList = eval(res.data.list);
            }
        })
    },
    inputFocus() {
        if (this.$element('groupValue')) {
            this.$element('groupValue').focus({ focus: false })
        }
    },
    // 保存分组信息
    saveGroupInfo() {
        if (this.groupNameValue == '') {
            this.showToast('请填写分组名称')
            return false;
        }
        this.inputFocus()
        if (this.groupType == 'add') {
            //新增
            request.post('user/add-group', {
                groupName: this.groupNameValue
            }).then(res => {
                this.closeWindow();
                this.item = {}
                this.groupNameValue = ''
                if (res.status == 200) {
                    this.showToast('新增分组成功');
                    this.getGroup();
                } else {
                    this.showToast('新增分组失败');
                }
            }).catch(err => {
                this.showToast('网络错误');
            })
        } else {
            //修改
            request.post('user/reset-group', {
                // oldGroupName: this.item.groupName,
                id: this.item.id,
                groupName: this.groupNameValue
            }).then(res => {
                this.closeWindow();
                this.groupNameValue = ''
                this.item = {}
                if (res.status == 200) {
                    this.showToast('修改成功');
                    this.getGroup();
                } else {
                    this.showToast('修改失败');
                }
            }).catch(err => {
                this.showToast('网络错误');
            })
        }
    },
    // 删除分组
    deleteGroup() {
        request.post('user/delete-group', {
            id: this.item.id
        }).then(res => {
            this.item = {}
            this.closeWindow()
            if (res.status == 200) {
                this.showToast('删除成功');
                this.getGroup()
            } else {
                this.showToast('删除失败');
            }

        }).catch(err => {

        })
    },
    // 删除户号
    deleteBill() {
        // console.log(this.item)
        // console.log(this.item.groupName)
        console.log(this.billId);
        // return false;
        request.post('user/delete-bill', {
            id: this.billId
            // sid: this._id,
            // groupName: this.groupName,
            // bill: this.billItem.bill
        }).then(res => {
            this.billId = '';
            // this.billItem = {};
            this.closeWindow();
            if (res.status == 200) {
                this.showToast('删除成功');
                this.getGroup();
            } else {
                this.showToast('删除失败');
            }
        }).catch(err => {
            this.showToast('网络错误');
        })
    },
    showModificationFn(type, item) {
        this.showModification = true;
        this.groupType = type;
        this.item = item;
    },
    showDeleteFn(item) {
        this.showDelete = true;
        this.item = item;
    },
    showDeleteBillFn(billId) {
        // this.groupId = groupId;
        this.billId = billId;
        this.showDeleteBill = true;
    },
    goRecharge(groupId, groupName, billitem) {
        console.log(groupId, groupName, billitem);
        // return false;
        this.showLoading = true;
        // 缴费项目信息
        request.post('payment/pay-type-detail', {
            cityName: billitem.cityName,
            type: billitem.type,
        }).then(res => {
            console.log("payment/pay-type-detail", res)
            // return false;
            this.showLoading = false;
            if (res.status == 200) {
                const item = res.data.paymentItemPagingModel;
                this.paymentItemList = res.data.paymentItemList;
                if (this.paymentItemList.length > 1) {
                    const paymentItemModelList = item.paymentItemModelList;
                    let paymentList = []
                    for (let i = 0; i < paymentItemModelList.length; i++) {
                        const element = paymentItemModelList[i]
                        if (element.paymentItemId == billitem.paymentItemId) {
                            paymentList.push(element)
                        }
                    }
                    console.log(billitem);
                    console.log("params post to Rechage",{
                        payName: '1',
                        title: billitem.typeName,
                        type: billitem.type,
                        // icon: billitem.imagUrl,
                        icon: billitem.imgUrl,
                        cityName: billitem.cityName,
                        paymentItemModelList: paymentList,//项目信息
                        bid: billitem.id,
                        groupId,
                        groupName,
                        oldGroupId: groupId,
                        // oldBill: billitem.bill
                        oldBill: billitem.houseNumber
                    });
                    console.log(billitem);
                    // return false;
                    storage.set({
                        key: "bid",
                        value: billitem.id
                    });
                    router.push({
                        uri: 'User/Recharge',
                        params: {
                            payName: '1',
                            title: billitem.typeName,
                            type: billitem.type,
                            // icon: billitem.imagUrl,
                            icon: billitem.imgUrl,
                            cityName: billitem.cityName,
                            paymentItemModelList: paymentList,//项目信息
                            bid: billitem.bid,
                            groupId,
                            groupName,
                            oldGroupId: groupId,
                            // oldBill: billitem.bill
                            oldBill: billitem.houseNumber
                        }
                    })
                } else {
                    // 账单详情
                    router.push({
                        uri: 'User/Recharge',
                        params: {
                            payName: '1',
                            title: billitem.typeName,
                            type: billitem.type,
                            icon: billitem.imagUrl,
                            cityName: billitem.cityName,
                            paymentItemModelList: item.paymentItemModelList,//项目信息
                            groupName,
                            oldGroupName: groupName,
                            oldBill: billitem.bill
                        }
                    })
                }
            } else {
                this.showToast(res.msg);
            }
        }).catch(err => {
            console.log(err)
            this.showLoading = false;
            this.showToast('网络错误');
        })
    },
    closeWindow() {
        this.inputFocus()
        this.showModification = false;
        this.showDelete = false;
        this.showDeleteBill = false;
    }
})
</script>
