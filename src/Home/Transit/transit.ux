<import src="../../common/TitleBar.ux"></import>
<template>
    <div class="regist">

    </div>
</template>

<style lang="less">
    @import './transit.less';
</style>

<script>
    import router from '@system.router'
    import storage from"@system.storage";
    import request from '../../utils/request'

    export default Custom_page ({
        public: {
            cityName:"",
            type:"",
            uri:'',
            external:''
        },
        onReady() {
            this.uri = this.$page.uri
            this.getParams()
            if(!this.cityName){
                this.cityName = "北京市"
            }
            if(!this.type){
                this.type = "1"
            }
            this.toRechange()
        },
        toRechange(){
            //1  电费// 2  水费// 3  燃气费// 4  手机充值
            // 5  通讯费// 6  有线电视费// 7  供暖费// 8  非税代收
            // 9  物业费// 10 教育考试// 11 交通罚款// 12 养老
            // 13 加油卡充值// 14 ETC充值// 15 其他// 16 党费
            const types = ['', '电费','水费','燃气费','手机充值','通讯费','有线电视费','供暖费','非税代收', '物业费','教育考试','交通罚款','养老','加油卡充值','ETC充值','其他','党费']
            storage.get({
				key:"sid",
				success: (data) => {
                    console.log(data)
					if(data){
                        // 缴费类别
                        console.log(this.cityName)
						request.post('jiaofei/pay-type-lst',{cityName:decodeURI(this.cityName)}).then(res => {
							console.log(res)
							if(res.status == 200){
                                for(let i = 0;i<res.data.length;i++){
                                    const item = res.data[i];
                                    if(item.typeName.indexOf(types[this.type]) != -1){
                                        if(item.typeName.indexOf('手机') != -1){
                                            router.replace({
                                                uri:'Home/Mobile',
                                                params:{
                                                    title:item.typeName,
                                                    type:item.type,
                                                    external:this.external,
                                                }
                                            })
                                        }else{
                                            router.replace({
                                                uri:'Home/Recharge',
                                                params:{
                                                    title:item.typeName,
                                                    type:item.type,
                                                    external:this.external,
                                                }
                                            })
                                        }
                                        
                                    }
                                }
							}else{
                                router.push({
                                    uri:'Home'
                                })
                            }
						}).catch(err => {
                            router.push({
                                uri:'Home'
                            })
                        })
                        
                    }else{
                        router.replace({
                            uri:'User/SmsLogin',
                            params:{
                                external:this.external,
                            }
                        })
                    }
                },
                error:(err) => {
                    router.replace({
                        uri:'User/SmsLogin',
                        params:{
                            external:this.external,
                        }
                    })
                }
            })
            
        },
        getParams(){
            const params = this.uri.split("?")[1]
            if(params){
                const keys = params.split("&");
                for(let i = 0;i<keys.length;i++){
                    const key = keys[i].split("=")[0]
                    const value = keys[i].split("=")[1]
                    this[key] = value
                }
            }
        }
    })
</script>