<import src="../../common/TitleBar.ux"></import>
<import name="toast" src="../../common/Toast/index.ux"></import>

<template>
    <div class="city-list_body">
        <TitleBar title="ÈÄâÊã©ÂüéÂ∏Ç" color="#fff" @click="hideInput"></TitleBar>
        <div class="search-city">
            <!-- <text>üîç</text> -->
            <image width="40" height="40" resize-mode="contain" src="../images/search_city_icon.png"></image>
            <input id="search-city" type="text" value="{{search_value}}" @change="searchCity" @blur="showList()" placeholder="ËØ∑ËæìÂÖ•ÂüéÂ∏ÇÂêçÁß∞"></input>
            <text show="{{show_close}}" @click="clearCityValue">‚ùé</text>
        </div>
        <div class="location" @click="hideInput">
            <text>ÊÇ®ÂΩìÂâçÈÄâÊã©ÂüéÂ∏ÇÔºö</text>
            <image width="34" height="34" resize-mode="contain" src="../images/location_icon.png"></image>
            <text> &nbsp;{{city_name}}</text>
        </div>
        <toast if="{{show_toast}}" text="{{toast_text}}"></toast>

        <list show="{{!showSearch}}" id="list-body" class="city-list">
            <list-item type="hot_city" class="hot-city">
                <text>ÁÉ≠Èó®ÂüéÂ∏Ç</text>
                <div class="hot-city_items">
                    <div class="city-item" @click="selectCity(item.cityName,item.cityId)" for="item in cityHotCategoryModelList">
                        <text>{{item.cityName}}</text>
                    </div>
                </div>
            </list-item>
            <list-item type="city_group" class="city-group" for="(index , item) in cityModelList">
                <div class="city-initial">
                    <text>{{item.cityFlag}}</text>
                </div>
                <div class="city-item" @click="selectCity(city.cityName,city.cityId)" for="city in item.children">
                    <text>{{city.cityName}}</text>
                </div>
            </list-item>
        </list>
        <div show="{{!showSearch}}" class="navigation-right" @touchmove="selectCityGroup()">
            <div @click="changeCityGroup(item.cityFlag)" for="item in cityModelList">
                <text>{{item.cityFlag}}</text>
            </div>
        </div>
        <div class="city-search_body" show="{{showSearch}}">
            <div class="city-item" @click="selectCity(city.cityName,city.cityId)" for="city in cityRenCategoryModelList">
                <text>{{city.cityName}}</text>
            </div>
        </div>
        <div class="propt-body" if="showPropt">
            <div class="propt-content">
                <text>{{cityFlag}}</text>
            </div>
        </div>
    </div>
</template>

<style lang="less">
@import './cityList.less';
</style>

<script>
const router = require('@system.router');
import request from '../../utils/request';
import storage from "@system.storage";
export default Custom_page({
    protected: {
        show_toast: false,
        type: '',
        toast_text: '',
        showSearch: false,
        show_close: false,
        search_value: "",
        tabIndex: 0,
        external: '',
        cityFlag: 'A',
        showPropt: false,
        city_name: "Âåó‰∫¨Â∏Ç",
        cityName: '',
        cityId: "101701",
        cityHotCategoryModelList: [],
        section: [],
        cityModelList: [],
        cityRenCategoryModelList: []
    },

    onReady() {
        storage.get({
            key: "cityName",
            success: (data) => {
                console.log('cityName ===== ' + data)

                // alert('cityName ===== '+data)
                if (data && data != "" && data != null) {
                    this.city_name = data;
                }
            }
        })
        request.get("payment/get-city-list").then(res => {
            console.log("payment/get-city-list", res);
            if (res.status == 200) {
                // cityRenCategoryModelList  ÊúÄËøëÂ∏∏Áî®ÂüéÂ∏Ç
                // cityHotCategoryModelList  ÁÉ≠Èó®ÂüéÂ∏Ç
                // cityCategoryModelList  ÂüéÂ∏ÇÂàóË°®
                // this.section = res.data.section;
                this.cityHotCategoryModelList = res.data.cityHotCategoryModelList[0].cityModelList;
                this.cityModelList = res.data.cityCategoryModelList;
                this.cityRenCategoryModelList = res.data.cityRenCategoryModelList;
                this.cacheRenList = res.data.cityRenCategoryModelList;
            }
        }).catch(err => {
            this.showToast("ÁΩëÁªúÈîôËØØ", 'back');
            // setTimeout(() => {
            //     router.push({
            //         uri:"/"
            //     })
            // },1500)
        })
    },
    showProptFn(cityFlag, time) {
        this.cityFlag = cityFlag;
        this.showPropt = true;
        setTimeout(() => {
            this.showPropt = false;
        }, time || 500)
    },
    changeCityGroup(cityFlag) {
        let index = 0;
        for (let i = 0; i < this.cityModelList.length; i++) {
            const item = this.cityModelList[i];
            if (item.cityFlag == cityFlag) {
                index = i + 1;
            }
        }
        this.showProptFn(cityFlag)
        const list = this.$element('list-body');
        list.scrollTo({ index: index });
    },
    // ÈÄâÊã©ÂàÜÁªÑ
    selectCityGroup(event) {
        let y = event.changedTouches[0].pageY;
        let index = parseInt((y - 400) / 40);
        index = index > 0 ? (index > this.cityModelList.length ? this.cityModelList.length : index + 1) : 1;
        // const initial = this.city_list[index-1].initial;
        this.showProptFn(this.cityModelList[index - 1].cityFlag)
        const list = this.$element('list-body');
        list.scrollTo({ index: index });
    },
    hideInput() {
        if(this.external != "vivoNegative"){
            this.$element('search-city').focus({ focus: false })
        }
    },
    // ÈÄâÊã©ÂüéÂ∏Ç
    selectCity(cityName, cityId) {
        this.city_name = cityName;
        this.cityName = cityName;
        this.cityId = cityId;
        storage.set({
            key: 'cityName',
            value: cityName,
        })
        storage.set({
            key: 'cityId',
            value: cityId,
        })
        if (this.type) {
            this.getPayType(cityName)
        } else {
            router.push({
                uri: "Home",
                params: {
                    tabIndex: this.tabIndex
                }
            })
        }
        this.showSearch = false;
        this.search_value = "";
        this.hideInput()
    },
    // ÊêúÁ¥¢ÂüéÂ∏Ç
    searchCity(response) {
        this.search_value = response ? response.value : this.search_value;
        let cityRenCategoryModelList = [];
        for (let i = 0; i < this.cityModelList.length; i++) {
            cityRenCategoryModelList = cityRenCategoryModelList.concat(this.cityModelList[i].children)
        }
        if (response.value != "") {
            this.show_close = true;
            this.showSearch = true;
            let newRenList = []
            for (let i = 0; i < cityRenCategoryModelList.length; i++) {
                if (cityRenCategoryModelList[i].cityName.indexOf(response.value) != -1) {
                    newRenList.push(cityRenCategoryModelList[i])
                }
            }
            this.cityRenCategoryModelList = newRenList
        } else {
            this.cityRenCategoryModelList = this.cacheRenList;
            this.show_close = false;
            this.showSearch = false;
        }
    },
    getPayType(cityName) {
        request.post('payment/pay-type-lst', { cityName: cityName }).then(res => {
            if (res.status == 200) {
                const data = res.data.paymentCitiesForClientModel.cebPaymentCategoriesList;
                console.log("payment/pay-type-lst with cityName", data);
                let havePayType = true
                for (let i = 0; i < data.length; i++) {

                    if (data[i].type == this.type) {
                        havePayType = false;
                        const element = data[i];
                        const obj = {
                            uri: 'Home/Recharge',
                            params: {
                                title: element.typeName,
                                type: element.type,
                                external: '',
                                icon: element.icon,
                            }
                        }
                        console.log(data[i])
                        storage.get({
                            key: "sessionId",
                            success: (data) => {
                                if (data) {
                                    this.getJfTypeDetail(obj)
                                } else {
                                    router.push({
                                        uri: 'User/SmsLogin'
                                    })
                                }
                            },
                            fail: () => {
                                router.push({
                                    uri: 'User/SmsLogin'
                                })
                            }
                        })
                    }
                }
                if (havePayType) {
                    this.showToast('ËØ•ÂüéÂ∏ÇÊöÇÊó†Ê≠§Áº¥Ë¥πÁ±ªÂà´')
                }
            }
        }).catch(err => {
            this.netWork = false
        })
    },
    // Êü•ËØ¢Áº¥Ë¥πÈ°πÁõÆ
    getJfTypeDetail(obj) {
        console.log(obj)
        if (obj.params.title.indexOf("ÊâãÊú∫") != -1) {
            obj.uri = "Home/Mobile"
            router.push(obj)
        } else {
            // Áº¥Ë¥πÈ°πÁõÆ‰ø°ÊÅØ
            request.post('payment/pay-type-detail', {
                cityName: this.cityName,
                type: obj.params.type,
            }).then(res => {
                if (res.status == 200) {
                    const item = res.data.paymentItemPagingModel;
                    this.paymentItemList = res.data.paymentItemList;
                    if (this.paymentItemList.length > 1) {
                        // ÂàóË°®ÈÄâÊã©
                        router.push({
                            uri: 'Home/ProjectList',
                            params: {
                                title: obj.params.title,
                                type: obj.params.type,
                                icon: obj.params.icon,
                                cityName: this.cityName,
                                external: this.external || 'card',
                                paymentItemList: this.paymentItemList,//ÈÄâÊã©ÂàóË°®
                                paymentItemModelList: item.paymentItemModelList,//È°πÁõÆ‰ø°ÊÅØ
                            }
                        })
                    } else {
                        console.log(obj.params.name)
                        // Ë¥¶ÂçïËØ¶ÊÉÖ
                        router.push({
                            uri: 'Home/Recharge',
                            params: {
                                payName: '1',
                                title: obj.params.title,
                                type: obj.params.type,
                                icon: obj.params.icon,
                                external: this.external || 'card',
                                cityName: this.cityName,
                                paymentItemModelList: item.paymentItemModelList,//È°πÁõÆ‰ø°ÊÅØ
                            }
                        })
                    }
                } else {
                    this.showToast(res.msg, "back")
                }
            })
        }
    },
    // ÊòæÁ§∫toast
    showToast(text, back) {
        this.toast_text = text;
        this.show_toast = true;
        setTimeout(() => {
            this.show_toast = false;
            if (back) {
                router.back()
            }
        }, 1500)
    },
    // Ê∏ÖÈô§ËæìÂÖ•Ê°Ü
    clearCityValue() {
        this.search_value = "";
        this.hideInput()
    },
    showList() {
        // this.showSearch = false;
    }
})
</script>