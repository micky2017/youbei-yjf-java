<import src="../../common/TitleBar.ux"></import>
<import name="Info" src="../../common/InfoList/index.ux"></import>
<import name="toast" src="../../common/Toast/index.ux"></import>
<import src="../../common/YjfLoading.ux"></import>

<template>
    <div class="inspect-body" onclick="inputFocus()">
        <TitleBar title="生活缴费" color="#fff"></TitleBar>
        <YjfLoading if="showLoading" />
        <div class="pay-fees">
            <div class="payment-icon">
                <image width="46" height="46" resize-mode="contain" src="{{iconUrl}}"></image>
                <text>{{title}}</text>
            </div>
            <div class="payment-type">
                <text if="!inputValue">请选择充值金额:</text>
                <text if="inputValue && billObj.payAmount == '0'">请输入充值金额:</text>
                <text if="inputValue && billObj.payAmount != '0'">缴费金额</text>
                <!-- </div> -->
                <!-- <div class="payment-input_type"> -->
                <div if="!inputValue" @click="pickerShow('选择金额')">
                    <text>{{money}} ▼</text>
                </div>
                <div if="billObj.payAmount == '0'">
                    <input class="input-payment_amount" id="payAmount" value="{{payAmountValue}}" placeholder="" onchange="payAmount" type="number" name="payAmount" />
                    <!-- <text>元</text> -->
                </div>
                <div if="billObj.payAmount != '0'">
                    <!-- <input id="payAmount" value="{{payAmountValue}}" disabled="true" placeholder="{{description}}" onchange="payAmount" type="number" name="payAmount" />
                    <text>元</text> -->
                    <text>{{payAmountValue}}元</text>
                </div>
            </div>
        </div>
        <div class="payment-user_info">
            <div class="{{item.info_name == info_list[info_list.length -1].info_name ? 'payment-info_item no-boder' : 'payment-info_item'}}" for="item in info_list">
                <text class="info-name">{{item.info_name}}</text>
                <text class="info-value">{{item.info_value}}</text>
            </div>
        </div>
        <div class="next-btn" @click="toOrders()">
            <text>下一步</text>
        </div>

        <toast if="{{show_toast}}" text="{{toast_text}}"></toast>

        <!-- 选择金额 -->

        <div class="picker-body" show="{{picker}}" @click="pickerHide()">
            <div class="picker-content" show="{{picker}}">
                <div class="picker-title">
                    <text></text>
                    <text>{{pickerTitle}}</text>
                    <div class="close-picker" @click="pickerHide()">
                        <text>✕</text>
                    </div>
                </div>
                <list class="picker-option">
                    <list-item class="picker-option_body">
                        <div class="picker-item" for="{{item in rangeData}}" @click="changeMoney(item)">
                            <text>{{item}}</text>
                            <!-- <input type="radio" name="picker"> -->
                            <text if="{{item == this.selectMoney}}" style="color:#9871c3">✔️</text>
                            <text else></text>
                        </div>
                    </list-item>
                </list>
                <div class="next-btn" @click="pickerSelect()">
                    <text>确定</text>
                </div>
            </div>
        </div>
    </div>
</template>
<style lang="less">
@import './inspect.less';
</style>
<script>
import router from '@system.router';
import request from '../../utils/request'
import statis from '../../utils/statistics.js'

export default Custom_page({
    protected: {
        showLoading: false,
        show_toast: false,
        pickerTitle: '选择金额',
        toast_text: '',
        money: "",
        data: {},
        reqData: {},
        selectMoney: "",
        payAmountValue: '',
        inputValue: true,
        paymentItem: {},
        amountLimit: '',
        itemValue: '',
        qryAcqSsn: '',
        rangeData: [],
        picker: false,
        bill: '',
        billObj: {},
        info_list: [],
        billQueryList: [],
        paymentList: [],
        billQueryResultDataModelList: [],
        fieldInfoKey: '',
        modelIndex: 0,
        iconUrl: '',
        title: '',
    },
    getIcon() {
        const iconList = [
            { icon: '/Home/images/icon/water.png', typeName: '水费', id: '', path: 'Home/Recharge' },
            { icon: '/Home/images/icon/power.png', typeName: '电费', id: '' },
            { icon: '/Home/images/icon/ranqi.png', typeName: '燃气费', id: '' },
            { icon: '/Home/images/icon/mobile.png', typeName: '手机充值', id: '', path: 'Home/Recharge' },
            { icon: '/Home/images/icon/tv.png', typeName: '有线电视', id: '' },
            { icon: '/Home/images/icon/jiayouka.png', typeName: '加油卡', id: '' },
            { icon: '/Home/images/icon/wuye.png', typeName: '物业费', id: '' },
            { icon: '/Home/images/icon/dang.png', typeName: '党费', id: '' },
            { icon: '/Home/images/icon/jiaoyu.png', typeName: '教育考试', id: '' },
            { icon: '/Home/images/icon/daishou.png', typeName: '非税代收', id: '' },
            { icon: '/Home/images/icon/qunuan.png', typeName: '供暖费', id: '' },
            { icon: '/Home/images/icon/liuliang.png', typeName: '流量', id: '' },
            { icon: '/Home/images/icon/qita.png', typeName: '其他', id: '' },
            { icon: '/Home/images/icon/etc.png', typeName: 'ETC', id: '' },
            { icon: '/Home/images/icon/yanglao.png', typeName: '养老', id: '' },
            { icon: '/Home/images/icon/jiaotong.png', typeName: '交通', id: '' },
            { icon: '/Home/images/icon/tongxu.png', typeName: '通讯费', id: '' }
        ];
        for (let i = 0; i < iconList.length; i++) {
            if (this.title.indexOf(iconList[i].typeName) != -1) {
                this.iconUrl = `${iconList[i].icon}`
            }
        }
    },
    // 处理账单信息并展示
    setInfo(billObj) {
        console.log("this.data in setInfo", this.data)
        const billDate = billObj.endDate ? `${billObj.beginDate}-${billObj.endDate}` : billObj.beginDate
        const newInfo = [{
            info_name: this.itemValue.split(":")[0],
            info_value: this.itemValue.split(":")[1],
        }, {
            info_name: "用户名",
            info_value: billObj.customerName,
        }];
        if (billObj.payAmount != '0' && billObj.payAmount) {
            newInfo.push({
                info_name: "账单金额",
                info_value: billObj.payAmount / 100 + '元',
            })
        }
        if (billObj.balance != '' && billObj.balance) {
            newInfo.push({
                info_name: "余额",
                info_value: billObj.balance / 100 + '元',
            })
        }
        if (this.paymentItem.businessFlow == 2) {
            if (this.data.item7) {
                newInfo.push({
                    info_name: "用电地址",
                    info_value: this.data.item7,
                })
            }
            newInfo.push({
                info_name: "补加金额",
                info_value: this.data.item3,
            }, {
                    info_name: "扣减金额",
                    info_value: this.data.item4,
                })
        }
        if (isNaN(billObj.beginDate) && !isNaN(Date.parse(billObj.beginDate))) {
            newInfo.push({
                info_name: "账期",
                info_value: billDate,
            })
        } else if (isNaN(billObj.endDate) && !isNaN(Date.parse(billObj.endDate))) {
            newInfo.push({
                info_name: "账期",
                info_value: billDate,
            })
        }
        if (this.fieldInfoKey != '') {
            newInfo.push({
                info_name: "账单说明",
                info_value: billObj[this.fieldInfoKey],
            })
        }
        this.info_list = newInfo;
    },
    onReady() {
        console.log("Ready");
        console.log(this.data)
        this.paymentItem = JSON.parse(this.paymentItem)
        this.data = JSON.parse(this.data)
        console.log(this.data)
        this.getIcon();
        if (this.data.paymentBillFieldsInfoModel) {
            // 获取账单说明
            const fieldInfo = this.data.paymentBillFieldsInfoModel.fieldInfo
            if (fieldInfo) {
                const fieldInfoList = fieldInfo.split("|")
                for (let i = 0; i < fieldInfoList.length; i++) {
                    const element = fieldInfoList[i]
                    const key = element.split("=")[0]
                    const value = element.split("=")[1]
                    if (value == '1') {
                        this.fieldInfoKey = key
                    }
                }
            }
        }
        this.billQueryList = this.data.billQueryResultDataModelList.map(item => {
            return item.beginDate
        })
        this.selectMoney = this.billQueryList[0];
        this.bill = this.billQueryList[0];
        this.billQueryResultDataModelList = this.data.billQueryResultDataModelList
        const billObj = this.data.billQueryResultDataModelList[this.modelIndex];
        this.billObj = billObj;
        console.log(billObj);
        if (billObj.payAmount && billObj.payAmount != '0') {
            this.payAmountValue = billObj.payAmount / 100
        }
        this.setInfo(billObj)
        // this.payAmountValue = billObj.payAmount /100;
        // 缴费
        this.payItem = this.data.createPaymentBillParamsModel;
        this.description = this.payItem.description;
        this.amountLimit = this.payItem.amountLimit.split('-');
        // this.payAmountValue = Number(this.amountLimit[0]);
        if (this.payItem.chooseAmount) {
            this.inputValue = false;
            this.paymentList = this.payItem.chooseAmount.split("|");
            this.money = this.paymentList[0];
            this.selectMoney = this.paymentList[0];
        } else {
            this.inputValue = true;
        }
    },
    inputFocus() {
        if(this.external != "vivoNegative"){
            if (this.$element('payAmount')) {
                this.$element('payAmount').focus({ focus: false })
            }
        }
    },
    // 处理输入框金额限制
    payAmount(response) {
        this.payAmountValue = response ? response.value : this.payAmountValue;
        if (this.payAmountValue.indexOf(".") == 0) {
            if (this.payAmountValue.indexOf(".") == 0) {
                this.payAmountValue = '0' + this.payAmountValue
            }
        }
        if (Number(this.payAmountValue) < Number(this.amountLimit[0])) {
            // this.payAmountValue = Number(this.amountLimit[0]);
            this.showToast(`最低金额限制为:${this.amountLimit[0]}`)
        } else if (Number(this.payAmountValue) > Number(this.amountLimit[1])) {
            // this.payAmountValue = Number(this.amountLimit[1]);
            this.showToast(`最高金额限制为:${this.amountLimit[1]}`)
        }
    },
    // 生成待支付订单
    toOrders() {
        if (this.inputValue) {
            if (!this.payAmountValue) {
                this.showToast("请输入充值金额")
                return false;
            }
        } else {
            if (!this.money) {
                this.showToast("请选择充值金额")
                return false;
            }
        }
        console.log("当前输入金额",this.payAmountValue,"当前扣费金额",this.info_list,this.info_list.info_value)
        // 查缴
        // request.post('jiaofei/generate-bill',params).then(res => {
        const params = {
            data: this.data,
            billObj: this.billObj,
            payAmount: this.payAmountValue,
            qryAcqSsn: this.qryAcqSsn,
            title: this.title
        }
        if (this.inputValue) {
            params.payAmount = this.payAmountValue;
        } else {
            params.payAmount = this.money;
        }
        params.reqData = this.reqData;

        if (this.paymentItem.businessFlow == 2) {
            const reqData = {
                itemCode: this.paymentItem.paymentItemId,
                flag: 2,
                type: 1,
                filed1: params.payAmount
                //  qryAcqSsn:this.data.qryAcqSsn,
            }
            Object.assign(reqData, JSON.parse(this.reqData))
            this.showLoading = true;
            request.post('payment/generate-bill', reqData).then(res => {
                this.showLoading = false;
                console.log("payment/generate-bill", res);
                if (res.status == 200) {
                    if (res.msg.indexOf("成功") != -1) {
                        params.data = res.data.billQueryResultModel
                        params.billObj = res.data.billQueryResultModel.billQueryResultDataModelList[0]
                        params.qryAcqSsn = res.data.qryAcqSsn
                        statis.statis('pending_order_click', {
                            itemCode: this.paymentItem.paymentItemId,
                            payAmount: params.payAmount
                        }, this)
                        console.log(params)
                        router.push({
                            uri: "Home/Orders",
                            params,
                        })
                    } else {
                        this.showToast(res.data.msg)
                    }

                } else {
                    this.showToast(res.msg)
                }
            }).catch(err => {
                this.showLoading = false;
            })
        } else {
            statis.statis('pending_order_click', {
                itemCode: this.paymentItem.paymentItemId,
                payAmount: params.payAmount
            }, this)
            router.push({
                uri: "Home/Orders",
                params,
            })
        }


    },
    // 显示选择框
    pickerShow(title) {
        if (title) {
            this.pickerTitle = title;
            if (title.indexOf("账单") != -1) {
                this.rangeData = this.billQueryList;
            } else {
                this.rangeData = this.paymentList;
            }
        }
        this.picker = true;
    },
    // 隐藏选择框
    pickerHide() {
        this.picker = false;
    },
    // 选择框确定选项
    pickerSelect() {
        if (this.pickerTitle.indexOf("账单") != -1) {
            for (let i = 0; i < this.billQueryList.length; i++) {
                if (this.billQueryList[i].indexOf(this.selectMoney) != -1) {
                    this.billObj = this.billQueryResultDataModelList[i]
                    console.log(i)
                    this.bill = this.billObj.beginDate
                    if (this.billObj.payAmount && this.billObj.payAmount != '0') {
                        this.payAmountValue = this.billObj.payAmount / 100
                    }
                    this.setInfo(this.billObj)
                }
            }
        } else {
            // this.selectMoney = value;
            this.money = this.selectMoney;
        }
        // this.money = this.selectMoney;
        this.picker = false;
    },
    // 选择框更换选项
    changeMoney(value) {
        this.selectMoney = value;
    },
    // 显示toast
    showToast(text, back) {
        this.toast_text = text;
        this.show_toast = true;
        setTimeout(() => {
            this.show_toast = false;
            if (back) {
                router.back()
            }
        }, 1500)
    },
})
</script>