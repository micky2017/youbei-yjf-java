<import src="../../common/TitleBar.ux"></import>
<import name="Info" src="../../common/InfoList/index.ux"></import>
<import name="toast" src="../../common/Toast/index.ux"></import>
<import src="../../common/YjfLoading.ux"></import>

<template>
    <div class="inspect-body" onclick="inputFocus()">
        <TitleBar title="确认信息" color="#fff"></TitleBar>
        <YjfLoading if="showLoading" />
        <div if="!inputValue" class="top-up_amount">
            <text>选择充值金额</text>
            <div @click="pickerShow('选择金额')">
                <text>{{money}} ▼</text>
            </div>
        </div>
        <div if="inputValue" class="top-up_amount">
            <text if="billObj.payAmount == '0'">输入充值金额</text>
            <text if="billObj.payAmount != '0'">缴费金额</text>
            <div if="billObj.payAmount == '0'">
                <input id="payAmount" value="{{payAmountValue}}" placeholder="{{description}}" onchange="payAmount" type="number" name="payAmount" />
                <text>元</text>
            </div>
            <div if="billObj.payAmount != '0'">
                <input id="payAmount" value="{{payAmountValue}}" disabled="true" placeholder="{{description}}" onchange="payAmount" type="number" name="payAmount" />
                <text>元</text>
                <!-- <text>{{payAmountValue}}元</text> -->
            </div>
        </div>
        <div class="info-list_body" style="margin-bottom:20px" if="this.billQueryList.length > 1">
            <div class="info-list_item" @click="pickerShow('选择账单')">
                <text class="info-name">选择账单</text>
                <text class="info-value">{{bill ? bill : '请选择'}}▼</text>
            </div>
        </div>
        <Info infoList="{{info_list}}"></Info>
        <text class="invoice">
            {{data.printAddress}}
        </text>
        <div class="next-btn" @click="toOrders()">
            <text>支付</text>
        </div>

        <toast if="{{show_toast}}" text="{{toast_text}}"></toast>

        <!-- 选择金额 -->

        <div class="picker-body" show="{{picker}}" @click="pickerHide()">
            <div class="picker-content" show="{{picker}}">
                <div class="picker-title">
                    <text></text>
                    <text>{{pickerTitle}}</text>
                    <div class="close-picker" @click="pickerHide()">
                        <text >✕</text>
                    </div>
                </div>
                <list class="picker-option">
                    <list-item class="picker-option_body">
                        <div class="picker-item" for="{{item in rangeData}}" @click="changeMoney(item)">
                            <text>{{item}}</text>
                            <!-- <input type="radio" name="picker"> -->
                            <text if="{{item == this.selectMoney}}" style="color:#9871c3">✔️</text>
                            <text else></text>
                        </div>
                    </list-item>
                </list>
                 <div class="next-btn" @click="pickerSelect()">
                    <text>确定</text>
                </div>
            </div>
        </div>
    </div>
</template>
<style lang="less">
    @import "./inspect.less";
</style>
<script>
    import router from '@system.router';
    import request from '../../utils/request'

    export default Custom_page ({
        protected: {
            showLoading:false,
            show_toast:false,
            pickerTitle:'选择金额',
            toast_text:'',
            money:"",
            data:{},
            reqData:{},
            selectMoney:"",
            payAmountValue:'',
            inputValue:true,
            paymentItem:{},
            amountLimit:'',
            itemValue:'',
            qryAcqSsn:'',
            rangeData:[],
            picker:false,
            bill:'',
            billObj:{},
            info_list: [],
            billQueryList:[],
            paymentList:[],
            billQueryResultDataModelList:[],
            fieldInfoKey:'',
        },
        setInfo(billObj){
            console.log(this.data)
            const billDate = billObj.endDate ? `${billObj.beginDate}-${billObj.endDate}` : billObj.beginDate
            const newInfo = [{
                info_name:this.itemValue.split(":")[0],
                info_value:this.itemValue.split(":")[1],
            },{
                info_name:"用户名",
                info_value:billObj.customerName,
            }];
            if(billObj.payAmount != '0' && billObj.payAmount){
                newInfo.push({
                    info_name:"账单金额",
                    info_value:billObj.payAmount/100 + '元',
                })
            }
            if(billObj.balance != '' && billObj.balance){
                newInfo.push({
                    info_name:"余额",
                    info_value:billObj.balance/100 + '元',
                })
            }
            if(this.data.item7){
                newInfo.push({
                    info_name:"用电地址",
                    info_value:this.data.item7,
                })
            }
            if(this.paymentItem.businessFlow== 2){
                newInfo.push({
                    info_name:"补加金额",
                    info_value:this.data.item3,
                },{
                    info_name:"扣减金额",
                    info_value:this.data.item4,
                })
            }
            if(billObj.beginDate.indexOf("/") != -1 || billObj.endDate.indexOf("/") != -1){
                newInfo.push({
                    info_name:"账期",
                    info_value:billDate,
                })
            }
            
            if(this.fieldInfoKey != ''){
                newInfo.push({
                    info_name:"账单说明",
                    info_value:billObj[this.fieldInfoKey],
                })
            }
            this.info_list = newInfo;
        },
        onReady() {
            this.paymentItem = JSON.parse(this.paymentItem)
            this.data = JSON.parse(this.data)
            if(this.data.paymentBillFieldsInfoModel){
                // 获取账单说明
                const fieldInfo = this.data.paymentBillFieldsInfoModel.fieldInfo
                if(fieldInfo){
                    const fieldInfoList = fieldInfo.split("|")
                    for(let i = 0;i<fieldInfoList.length;i++){
                        const element = fieldInfoList[i]
                        const key = element.split("=")[0]
                        const value = element.split("=")[1]
                        if(value == '1'){
                            this.fieldInfoKey = key
                        }
                    }
                }
            }
            
            
            this.billQueryList = this.data.billQueryResultDataModelList.map(item => {
                return item.beginDate
            })
            this.selectMoney = this.billQueryList[0];
            this.bill = this.billQueryList[0];
            this.billQueryResultDataModelList = this.data.billQueryResultDataModelList
            const billObj = this.data.billQueryResultDataModelList[0];
            this.billObj = billObj;
            if(billObj.payAmount && billObj.payAmount != '0'){
                this.payAmountValue = billObj.payAmount /  100
            }
            this.setInfo(billObj)
            // this.payAmountValue = billObj.payAmount /100;
            // 缴费
            this.payItem = this.data.createPaymentBillParamsModel;
            this.description = this.payItem.description;
            this.amountLimit = this.payItem.amountLimit.split('-');
            // this.payAmountValue = Number(this.amountLimit[0]);
            if(this.payItem.chooseAmount){
                this.inputValue = false;
                this.paymentList = this.payItem.chooseAmount.split("|");
                this.money = this.paymentList[0];
                this.selectMoney = this.paymentList[0];
            }else{
                this.inputValue = true;
            }
        },
        inputFocus(){
            if(this.inputValue){
                this.$element('payAmount').focus({focus:false})
            }
        },
        payAmount(response){
            this.payAmountValue = response ? response.value : this.payAmountValue;
            if(this.payAmountValue.indexOf(".") == 0){
                if(this.payAmountValue.indexOf(".") == 0){
                    this.payAmountValue = '0' + this.payAmountValue
                }
            }
            if(Number(this.payAmountValue)<Number(this.amountLimit[0])){
                // this.payAmountValue = Number(this.amountLimit[0]);
                this.showToast(`最低金额限制为:${this.amountLimit[0]}`)
            }else if(Number(this.payAmountValue)>Number(this.amountLimit[1])){
                // this.payAmountValue = Number(this.amountLimit[1]);
                this.showToast(`最高金额限制为:${this.amountLimit[1]}`)
            }
        },
        toOrders(){
            if(this.inputValue){
                if(!this.payAmountValue){
                    this.showToast("请输入充值金额")
                    return false;
                }
            }else{
                if(!this.money){
                    this.showToast("请选择充值金额")
                    return false;
                }
            }
            // 查缴
            // request.post('jiaofei/generate-bill',params).then(res => {
                const params={
                    data:this.data,
                    billObj:this.billObj,
                    payAmount:this.payAmountValue,
                    qryAcqSsn:this.qryAcqSsn
                }
                if(this.inputValue){
                    params.payAmount = this.payAmountValue;
                }else{
                    params.payAmount = this.money;
                }
                params.reqData = this.reqData;

                 if(this.paymentItem.businessFlow== 2){
                     const reqData = {
                         itemCode:this.paymentItem.paymentItemId,
                         flag:2,
                         type:1,
                         filed1:params.payAmount
                        //  qryAcqSsn:this.data.qryAcqSsn,
                     }
                     Object.assign(reqData,JSON.parse(this.reqData))
                     this.showLoading = true;
                    request.post('jiaofei/generate-bill',reqData).then(res => {
                        this.showLoading = false;
                        if(res.status == 200){
                            if(res.data.msg.indexOf("成功") != -1){
                                params.data = res.data.billQueryResultModel
                                params.billObj = res.data.billQueryResultModel.billQueryResultDataModelList[0]
                                // this.data.billQueryResultDataModelList[0]
                                params.qryAcqSsn = res.data.qryAcqSsn
                                router.push({
                                    uri:"Home/Orders",
                                    params,
                                })
                            }else{
                                this.showToast(res.data.msg)
                            }
                            
                        }else{
                            this.showToast(res.data.msg)
                        }
                    }).catch(err => {
                        this.showLoading = false;
                    })
                }else{
                    router.push({
                        uri:"Home/Orders",
                        params,
                    })
                }
                
            
        },
        pickerShow(title){
            if(title){
                this.pickerTitle = title;
                if(title.indexOf("账单") != -1){
                    this.rangeData = this.billQueryList;
                }else{
                    this.rangeData = this.paymentList;
                }
            }
            this.picker = true;
        },
        pickerHide(){
            this.picker = false;
        },
        pickerSelect(){
            if(this.pickerTitle.indexOf("账单") != -1){
                // this.rangeData = this.billQueryList;
                // this.billObj = 
                for(let i = 0;i<this.billQueryList.length;i++){
                    if(this.billQueryList[i].indexOf(this.selectMoney) != -1){
                        this.billObj = this.billQueryResultDataModelList[i]
                        console.log(i)
                        this.bill = this.billObj.beginDate
                        if(this.billObj.payAmount && this.billObj.payAmount != '0'){
                            this.payAmountValue = this.billObj.payAmount /  100
                        }
                        this.setInfo(this.billObj)
                    }
                }
            }else{
                // this.selectMoney = value;
                this.money = this.selectMoney;
            }
            // this.money = this.selectMoney;
            this.picker = false;
        },
        changeMoney(value){
            this.selectMoney = value;
            // if(this.pickerTitle.indexOf("账单") != -1){
            //     // this.rangeData = this.billQueryList;
            //     // this.billObj = 
            //     for(let i = 0;i<this.billQueryList.length;i++){
            //         if(this.billQueryList.indexOf(value) != -1){
            //             this.billObj = this.billQueryResultDataModelList[i]
            //             this.setInfo(this.billObj)
            //         }
            //     }
            // }else{
            //     this.selectMoney = value;
            // }
            
        },
        // 显示toast
        showToast(text,back){
            this.toast_text = text;
            this.show_toast = true;
            setTimeout(() => {
                this.show_toast = false;
                if(back){
                    router.back()
                }
            },1500)
        },
    })
</script>